# -*- coding: utf-8 -*-
import pandas as pd
import multiprocessing
from konlpy.tag import Okt
from collections import Counter

# Okt 초기화
okt = Okt()
exclude_word = ['하다', '있다', '되다', '현상', '발생', '여부', '내용', '인지', '고등', '조치', '생일', '대한']  # 뺄 단어(불용어)
include_word = ['증상', '수리', '점검', '재현', '엔진', '주행', '엔진오일', '교체', '시동', '문제', '소음', '결함', '운행', '리콜', '점등', '부품', '작동',
                '브레이크',
                '불량', '정비', '미션', '동일', '정차', '에어컨', '가속', '개선', '기어', '정지', '압력', '과열', '고장', '진동', '냉각수', '누유', '부식',
                '배터리', '차체', '누수',
                '고속도로', '제동', '에바', '변속기', '하이브리드', '경고', '접수', '진단', '차종', '센서', '소모품', '문제점', '부품', '장치', '소리', '충돌',
                '차단', '진입', '정지',
                '배기', '연료', '배출가스', '제어', '온도', '변속', '안전벨트', '전자', '브레이크패드', '타이어', '램프', '에어백', '점화', '서스펜션', '마모',
                '오작동', '부하', '밀림',
                '파손', '연소', '유압', '전기', '접촉불량', '시동불량', '불꽃', '컴프레서', '캠샤프트', '스타터', '밸브', '패킹', '팬벨트', '퓨즈', '실린더',
                '회전', '조립불량', '화재',
                '배선', '차단기', '미끄러짐', '경사로', '급정거', '후진', '변형', '가속불량', '기화기', '클러치', '스로틀', '미터기', '배출', '제어판', '하이드로백',
                '전류', '전력', '전압', '배터리', '배터리 단자', '배터리 충전', '커넥터', '도어', '창문', '스위치', '열선', '와이퍼', '휠', '알터네이터', '변속기',
                '기어박스', '드라이브샤프트', '서보모터', '엔진오일', '윤활', '냉각수', '라디에이터', '연료펌프', '연료필터', '산소센서', '스파크플러그', '점화코일',
                '휠베어링', '브레이크디스크', 'ABS', '충격흡수장치', '로어암', '쇼크업소버', '스테빌라이저', '링크', '드라이브어셈블리', '부스터', '배기매니폴드',
                '촉매변환기', '시트벨트', '프리텐셔너', '윈드실드', '와셔펌프', '전면유리', '뒷유리', '백미러', '사이드미러', '크루즈컨트롤', '파워스티어링', '핸들',
                '풋페달', '브레이크 호스', '휠 얼라인먼트', '냉각팬', '에어필터', '내비게이션', '헤드라이트', '미등', '브레이크라이트', '트렁크', '후드', '엔진마운트',
                '로커암', '휠 허브', '배기플랜지', '파킹브레이크', '서모스탯', '인젝터', '스로틀바디', '차체프레임', '섀시', '리어액슬', '토션바', '펌프', '라디에이터 캡',
                '송풍기', '시가잭', '브러시', '볼트', '너트', '텐셔너', '배터리 케이블', '엔진블록', '허브어셈블리', '휠 너트', '휠 캡', '휠 너클', '휠 스터드',
                '배기밸브', '흡기밸브', '연료인젝터', '압축기', '터보차저', '슈퍼차저', '연료압력조절기', '에어백 모듈', '서스펜션 스프링', '트레일링암', '휠 커버',
                '로커패널', '윈도우 모터', '와이퍼 모터', '연료탱크 캡', '가솔린 필터', '오일 필터', '전조등 스위치', '워셔 리저버', '오일 펌프', '전동 스티어링',
                '배터리 단자', '캠샤프트', '크랭크샤프트', '실린더 헤드', '엔진 실린더', '배기 브래킷', '파워 도어 락', '도어 핸들', '키 박스', '연료 게이지', '점화 배선',
                '변속기 센서', '에어백 센서', '트렁크 래치', '연료 주입구', '시트 프레임', '시트 포지셔너', '시트 조절기', '열선시트', '후방카메라', '차선이탈경고',
                '도어 컨트롤 모듈', '보조 브레이크 시스템', '경고등', '대시보드 패널','대시보드', '스티어링 칼럼', '차체 패널', '그릴', '서브프레임', '전자 주차 브레이크',
                '엔진 오일 필러 캡,연료 레일', '엔진 팬','크랭크 샤프트 포지션 센서']


# 형태소 분석 함수 정의 (명사 추출 및 불용어 처리)
# 현재 필요한 단어 정의뒤 사전 만들어서 포함되는 단어 뽑아내는중
def analyze_nouns(text):
    if not isinstance(text, str):  # 문자열이 아닌 경우 빈 리스트 반환
        return []
    nouns = okt.nouns(text)
    must_nouns = [noun for noun in nouns if noun in include_word]
    # filtered_nouns = [noun for noun in nouns if noun not in exclude_word and len(noun) > 1]
    return must_nouns


# 병렬 처리 함수
def parallel_morph_analysis(data, num_workers=4):
    with multiprocessing.Pool(num_workers) as pool:
        results = pool.map(analyze_nouns, data)
    return results


# CSV 파일 불러오기
if __name__ == '__main__':
    csv_file_path = './data/defect_report.csv'  # 파일 넣어서 만듬
    df = pd.read_csv(csv_file_path, sep='\x01', header=None)  # read_sql로 DB에서 뽑아와서 해야 할듯

    # 패턴 제거(서식임)
    patterns_to_remove = [
        r'○ 현상 및 증상내용',
        r'○ 현재 증상 재현 여부 ',
        r'○ 점검 및 수리여부',
        r'○ 현재 증상 재현 여부',
        r'○ 사고발생일시',
        r'○ 최초 현상 발생(인지)일'
    ]
    for pattern in patterns_to_remove:
        df[13].replace(pattern, '', inplace=True)

    # 형태소 분석 대상 열 선택
    texts = df[13].tolist()  # 결함내용 컬럼, 컬럼명 넣기

    # 형태소 분석 실행
    morphed_texts = parallel_morph_analysis(texts)

    # 명사들을 한 리스트로 합치기
    all_nouns = [noun for nouns_list in morphed_texts for noun in nouns_list]

    # 명사 빈도수 계산
    noun_counter = Counter(all_nouns)
    filtered_nouns = [item for item in noun_counter.most_common() if
                      item[1] > 0]  # 20개 이하로 언급된 단어는 일단 자름(무의미한 단어가 너무 많았음)

    df_nouns = pd.DataFrame(filtered_nouns, columns=['Noun', 'Frequency'])

    # CSV 파일로 저장
    print(filtered_nouns)  # 명사 출력중 (많은 순으로)
    df_nouns.to_csv('noun_frequency.csv', index=False, encoding='utf-8')

    # 결과 출력